import copy
import sys
import os

WALL = "#"
EMPTY = " "
START = "S"
EXIT = "E"
BLOCK = chr(9617)
NORTH = "NORTH"
SOUTH = "SOUTH"
EAST = "EAST"
WEST = "WEST"


def wall_str_to_wall_dict(wall_str):
    """Takes a string representation of a wall drawing (like those in
    ALL_OPEN or CLOSED) and returns a representation in a dictionary
    with (x, y) tuples as keys and single-character strings of the
    character to draw at that x, y location."""

    wall_dict = {}
    height = 0
    width = 0

    for y, line in enumerate(wall_str.splitlines()):
        if y > height:
            height = y

        for x, character in enumerate(line):
            if x > width:
                width = x
            wall_dict[(x, y)] = character

    wall_dict["height"] = height + 1
    wall_dict["width"] = width + 1
    return wall_dict


EXIT_DICT = {(0, 0): 'E', (1, 0): 'X', (2, 0): 'I',
             (3, 0): 'T', 'height': 1, 'width': 4}

ALL_OPEN = wall_str_to_wall_dict(r'''
.................
____.........____
...|\......./|...
...||.......||...
...||__...__||...
...||.|\./|.||...
...||.|.X.|.||...
...||.|/.\|.||...
...||_/...\_||...
...||.......||...
___|/.......\|___
.................
.................'''.strip())

CLOSED = {}
CLOSED['A'] = wall_str_to_wall_dict(r'''
_____
.....
.....
.....
_____'''.strip())

CLOSED['B'] = wall_str_to_wall_dict(r'''
.\.
..\
...
...
...
../
./.'''.strip())

CLOSED['C'] = wall_str_to_wall_dict(r'''
___________
...........
...........
...........
...........
...........
...........
...........
...........
___________'''.strip())

CLOSED['D'] = wall_str_to_wall_dict(r'''
./.
/..
...
...
...
\..
.\.'''.strip())

CLOSED['E'] = wall_str_to_wall_dict(r'''
..\..
...\_
....|
....|
....|
....|
....|
....|
....|
....|
....|
.../.
../..'''.strip())

CLOSED['F'] = wall_str_to_wall_dict(r'''
../..
_/...
|....
|....
|....
|....
|....
|....
|....
|....
|....
.\...
..\..'''.strip())


def display_wall_dict(wall_dict):
    """Display a wall dictionary, as returned by wall_str_to_wall_dict(), on
    the screen."""

    print(BLOCK * (wall_dict["width"] + 2))

    for y in range(wall_dict["height"]):
        print(BLOCK, end="")
        for x in range(wall_dict["width"]):
            wall = wall_dict[(x, y)]
            if wall == ".":
                wall = " "
            print(wall, end="")
        print(BLOCK)
    print(BLOCK * (wall_dict["width"] + 2))


def paste_wall_dict(src_wall_dict, dst_wall_dict, left, top):
    """Copy the wall representation dictionary in srcWallDict on top of
    the one in dstWallDict, offset to the position given by left, top."""

    dst_wall_dict = copy.copy(dst_wall_dict)

    for x in range(src_wall_dict["width"]):
        for y in range(src_wall_dict["height"]):
            dst_wall_dict[(x + left, y + top)] = src_wall_dict[(x, y)]
    return dst_wall_dict


def make_wall_dict(maze, player_x, player_y, player_direction, exit_x, exit_y):
    """From the player's position and direction in the maze (which has
    an exit at exitx, exity), create the wall representation dictionary
    by pasting wall dictionaries on top of ALL_OPEN, then return it."""

    if player_direction == NORTH:
        offsets = (('A', 0, -2), ('B', -1, -1), ('C', 0, -1),
                   ('D', 1, -1), ('E', -1, 0), ('F', 1, 0))

    if player_direction == SOUTH:
        offsets = (('A', 0, 2), ('B', 1, 1), ('C', 0, 1),
                   ('D', -1, 1), ('E', 1, 0), ('F', -1, 0))

    if player_direction == EAST:
        offsets = (('A', 2, 0), ('B', 1, -1), ('C', 1, 0),
                   ('D', 1, 1), ('E', 0, -1), ('F', 0, 1))

    if player_direction == WEST:
        offsets = (('A', -2, 0), ('B', -1, 1), ('C', -1, 0),
                   ('D', -1, -1), ('E', 0, 1), ('F', 0, -1))

    section = {}

    for sec, x_off, y_off in offsets:
        section[sec] = maze.get((player_x + x_off, player_y + y_off), WALL)
        if (player_x + x_off, player_y + y_off) == (exit_x, exit_y):
            section[sec] = EXIT

    wall_dict = copy.copy(ALL_OPEN)
    PASTE_CLOSED_TO = {'A': (6, 4), 'B': (4, 3), 'C': (3, 1),
                       'D': (10, 3), 'E': (0, 0), 'F': (12, 0)}

    for sec in "ABCDEF":
        if section[sec] == WALL:
            wall_dict = paste_wall_dict(CLOSED[sec], wall_dict,
                                        PASTE_CLOSED_TO[sec][0], PASTE_CLOSED_TO[sec][1])

        if section['C'] == EXIT:
            wall_dict = pasteWallDict(EXIT_DICT, wall_dict, 7, 9)
        if section['E'] == EXIT:
            wall_dict = pasteWallDict(EXIT_DICT, wall_dict, 0, 11)
        if section['F'] == EXIT:
            wall_dict = pasteWallDict(EXIT_DICT, wall_dict, 13, 11)

        return wall_dict


print('Maze Runner 3D, by Al Sweigart al@inventwithpython.com')
print('(Maze files are generated by mazemakerrec.py)')

while True:
    print("Enter the filename of the maze (or LIST or QUIT):")
    filename = input("> ")

    if filename.upper() == "LIST":
        print("Maze files found in", os.getcwd())
        for file_in_current_folder in os.listdir():
            if (file_in_current_folder.startswith("maze")
                    and file_in_current_folder.endswith(".txt")):
                print("  ", file_in_current_folder)
        continue

    if filename.upper() == "QUIT":
        sys.exit()

    if os.path.exists(filename):
        break

    print("There is no file named ", filename)

maze_file = open(filename)
maze = {}
lines = maze_file.readlines()
px = None
py = None
exit_x = None
exit_y - None
y = 0

for line in lines:
    WIDTH = len(line.rstrip())
    for x, character in enumerate(line.rstrip()):
        assert character in (
            WALL, EMPTY, START, EXIT), 'Invalid character at column {}, line {}'.format(x + 1, y + 1)
        if character in (WALL, EMPTY):
            maze[(x, y)] = character
        elif character == START:
            px, py = x, y
            maze[(x, y)] = EMPTY
        elif character == EXIT:
            exit_x, exit_y = x, y
            maze[(x, y)] = EMPTY

    y += 1
HEIGHT = y

assert px != None and py != None, 'No start point in file.'
assert exitx != None and exity != None, 'No exit point in file.'
p_dir = NORTH

while True:
    display_wall_dict(make_wall_dict(maze, px, py, p_dir, exit_x, exit_y))

    while True:
        print('Location ({}, {}) Direction: {}'.format(px, py, pDir))
        print(' (W)')
        print('Enter direction: (A) (D) or QUIT.')
        move = input('> ').upper()

    if move == QUIT:
        print("Thanks for playing!")
        sys.exit()

    if (move not in ['F', 'L', 'R', 'W', 'A', 'D']
            and not move.startswith('T')):
        print('Please enter one of F, L, or R (or W, A, D).')
        continue

    if move == 'F' or move == 'W':
        if p_dir == NORTH and maze[(px, py - 1)] == EMPTY:
            py -= 1
            break
        if p_dir == SOUTH and maze[(px, py + 1)] == EMPTY:
            py += 1
            break
        if p_dir == EAST and maze[(px + 1, py)] == EMPTY:
            px += 1
            break
        if p_dir == WEST and maze[(px - 1, py)] == EMPTY:
            px -= 1
            break

    elif move == 'L' or move == 'A':
        p_dir = {NORTH: WEST, WEST: SOUTH,
                 SOUTH: EAST, EAST: NORTH}[p_dir]
        break
    elif move == 'R' or move == 'D':
        pDir = {NORTH: EAST, EAST: SOUTH,
                SOUTH: WEST, WEST: NORTH}[p_dir]
        break

    elif move.startswith('T'):
        px, py = move.split()[1].split(',')
        px = int(px)
        py = int(py)
        break
    else:
        print("You cannot move in that direction.")

    if (px, py) == (exit_x, exit_y):
        print("You have reached the exit! Good job!")
        print("Thanks for playing!")
        sys.exit()
